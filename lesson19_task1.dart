void main() {
  double tempInCelcius = 20;

  ToKelvin toKelvin = ToKelvin();
  double tempInKelvin = toKelvin.convert(tempInCelcius);
  print(
      '$tempInCelcius градусов Цельсия если перевести в Кельвины, то будет $tempInKelvin Кельвин');

  print('-' * 30);

  ToFahrenheit toFahrenheit = ToFahrenheit();
  double tempInFahrenheit = toFahrenheit.convert(tempInCelcius);
  print(
      '$tempInCelcius градусов Цельсия если перевести в Фаренгейты, то будет $tempInFahrenheit Фаренгейт');
}

/* Task #1.
Напишите класс BaseConverter для конвертации из градусов по Цельсию в Кельвины, 
Фаренгейты, и так далее. 
У класса должен быть метод convert, который и делает конвертацию. 

1) Создать абстрактный класс Конвертер 
2) Реализовать интерфейс (т.е. последующие классы имплентируются от Конвертера) 
*/

abstract class BaseConverter {
  double convert(double celsius);
}

class ToKelvin implements BaseConverter {
  @override
  double convert(double celsius) {
    return celsius + 273.15;
  }
}

class ToFahrenheit implements BaseConverter {
  @override
  double convert(double celsius) {
    return celsius * 9 / 5 + 32;
  }
}

/* Task #2.
Создать класс Tiles (кафель), который будет содержать поля с открытым доступом: 
brand, size_h, size_w, price и метод класса getData(). 
В главной функции объявить пару объектов класса и внести данные в поля. 
Затем отобразить их, вызвав метод getData(). 
*/

/* Task #3.
Определить класс Children, который содержит такие поля (члены класса): 
закрытые – имя ребенка, фамилию и возраст , публичные – методы ввода данных и 
отображения их на экран. 
Объявить два объекта класса, внести данные и показать их. 
*/

/* Task #4.
Создайте класс Soda (для определения типа газированной воды), принимающий 1 
аргумент при инициализации (отвечающий за добавку к выбираемому лимонаду). 
В этом классе реализуйте метод show_my_drink(), выводящий на печать «Газировка 
и {ДОБАВКА}» в случае наличия добавки, а иначе отобразится следующая фраза: 
«Обычная газировка». 
*/

/* Task #5.
Реализуйте класс Worker (Работник), который будет иметь следующие свойства: 
name (имя), surname (фамилия), rate (ставка за день работы), days (количество 
отработанных дней). 
Также класс должен иметь метод getSalary(), который будет выводить зарплату 
работника. 
Зарплата - это произведение (умножение) ставки rate на количество отработанных 
дней days. 
*/

/* Task #6.
Автомобили. Создать класс Car, Engine и Driver , Класс Driver содержит поля - 
ФИО, стаж вождения. 
● Класс Engine содержит поля - мощность, производитель. 
● Класс Car содержит поля - марка автомобиля, класс автомобиля, вес, 
водитель типа Driver, мотор типа Engine. Методы start(), stop(), turnRight(), 
turnLeft(), которые выводят на печать: ’Поехали’, ‘Останавливаемся’, ‘Поворот 
направо’ или ‘Поворот налево’. 
А также метод printCarSetting(), который выводит полную информацию об 
автомобиле, ее водителе и моторе. 
● Создать производный от Car класс - Lorry (грузовик), характеризуемый также 
грузоподъемностью кузова. 
Создать производный от Car класс - SportCar, характеризуемый также предельной 
скоростью. 
Пусть класс Driver расширяет класс Person. 
*/

/* Task #7.
Напишите программу, которая должна определить, пройдет ли поезд в тоннель. 
Размеры тоннеля (ширина и высота) вводит пользователь. 
Тоже самое касается габаритов поезда, пользователь вводит в программу значения 
длины, ширины и высоты поезда. 
*/

/* Task #8.
Некая сеть фастфудов предлагает несколько видов гамбургеров: маленький (50 сом, 
20 калорий) 
большой (100 сом, 40 калорий) 
Гамбургер может быть с одним из нескольких видов начинок (обязательно): 
сыром (+ 10 сом, + 20 калорий) 
салатом (+ 20 сом, + 5 калорий) 
картофелем (+ 15 сом, + 10 калорий) 
Дополнительно, гамбургер можно посыпать приправой (+ 15 сом, 0 калорий) и полить 
майонезом (+ 20 сом, + 5 калорий). 
Напиши программу, расчиытвающую стоимость и калорийность гамбургера. 
Используй ООП подход (подсказка: нужен класс Гамбургер, методы для выбора опций 
и рассчета нужных величин). 
Код должен быть защищен от ошибок. 
Представь, что твоим классом будет пользоваться другой программист. Е
сли он передает неправильный тип гамбургера, например, или неправильный вид 
добавки, должно выбрасываться исключение (ошибка не должна молча игнорироваться).
*/

